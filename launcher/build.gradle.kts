val projectsAlias = projects

plugins {
    id("org.beryx.runtime") version "1.12.5"
    id("org.openjfx.javafxplugin")
}

dependencies {
    api(projectsAlias.core)
}

application {
    mainClass.set("karth.launcher.KarthLauncher")
    applicationName = "Karth"
}

javafx {
    version = "17.0.2"
    modules(
        "javafx.base",
        "javafx.controls",
        "javafx.fxml",
        "javafx.graphics",
        "javafx.media",
        "javafx.swing",
        "javafx.web"
    )
}


runtime {
    addModules(
        "java.datatransfer", "java.desktop", "java.prefs",
        "java.logging", "java.naming", "java.net.http",
        "java.sql", "java.scripting", "java.xml",
        "jdk.crypto.ec", "jdk.jfr", "jdk.jsobject",
        "jdk.unsupported", "jdk.unsupported.desktop", "jdk.xml.dom"
    )
    launcher {
        noConsole = true
    }
    jpackage {

        val currentOs = org.gradle.internal.os.OperatingSystem.current()

        val imgType = when {
            currentOs.isWindows -> "ico"
            currentOs.isMacOsX -> "icns"
            else -> "png"
        }

        // TODO: add support for dark-theme icon, maybe depending on OS theme.
        imageOptions.addAll(arrayOf("--icon", "src/main/resources/gearth/ui/themes/G-Earth/logo.$imgType"))

        if (currentOs.isWindows) {
            installerOptions.addAll(
                listOf(
                    "--win-per-user-install",
                    "--win-dir-chooser",
                    "--win-menu"
                )
            )
        }
    }
}

tasks.jpackageImage {
    doLast {
        val os = org.gradle.internal.os.OperatingSystem.current()
        val outPath = when {
            os.isWindows -> project.name
            os.isMacOsX -> "${project.name}.app/Contents"
            else -> "${project.name}/lib"
        }
        copy {
            val buildResourcesPath = "src/main/resources/build"
            when {
                os.isWindows -> {
                    /*
                    TODO: differentiate between 32bit and 64bit windows.
                     */
                    from("$buildResourcesPath/windows/64bit")
                    include("G-Mem.exe")
                }
                os.isMacOsX -> {
                    from("$buildResourcesPath/mac")
                    /*
                     * The`g_mem_mac` executable is generated by a modified version of the G-Mem program.
                     *
                     * Which can be found here: https://github.com/dorving/g_mem_mac
                     */
                    include("G-Mem")
                }
            }
            into("$buildDir/jpackage/$outPath/app")
        }
    }
}
